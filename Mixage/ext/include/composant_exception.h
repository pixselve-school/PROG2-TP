// -*- c++ -*-

#ifndef __COMPOSANT_EXCEPTION__H__
#define __COMPOSANT_EXCEPTION__H__

#include <exception>
#include <string>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	composant_exception
///
/// \brief classe qui gère les exceptions liées à un composant
///
/// \author	Jean Christophe Engel, Fabrice Lamarche, University Of Rennes 1
/// \date	23/04/2010
////////////////////////////////////////////////////////////////////////////////////////////////////
class composant_exception : public std::exception {
public:
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \fn	composant_exception(const std::string & msg)
  /// \brief	initialiser une exception de composant
  /// \param msg :  texte qui décrit l'erreur
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  composant_exception(const std::string & msg) : message(msg) {}

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \fn	virtual ~composant_exception(void) throw ()
  /// \brief	Destructeur
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual ~composant_exception() throw () {}

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \fn	virtual const char* what() const throw()
  /// \brief	Returns a C-style character string describing the general cause of
  ///		the current error (the same string passed to the constructor).
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual const char* what() const throw() { return message.c_str(); }

private :
  std::string message;
};

#endif // __COMPOSANT_EXCEPTION__H__
